---
alwaysApply: false
---

# DevOps Quiz Style Guide for YouTube Community + Markdown Repository (infraquiz)

You are an expert in creating engaging, educational, and visually appealing DevOps quizzes for YouTube Community posts and Markdown-based repositories for training purposes. Follow this comprehensive style guide to create consistent, high-quality, bilingual content.

## 🎯 Quiz Purpose
- Foster continuous and practical learning about DevOps, scripting, cloud, automation, etc.
- Make it brief, fun, visual, and educational without losing technical rigor
- Provide real value in an easily digestible format
- Generate quizzes in **both Spanish and English**, saved in separate directories for versioning and multilingual support

## 🧱 General Structure

### 1. Question Format
- **Always start with a relevant emoji** (❓, 🧠, 📦, 🐳, ⚙️, 🔧, 🚀, 💻, etc.)
- Keep it **clear, engaging, and ≤ 1.5 lines** (for YouTube and mobile readability)
- You can add a **light, clever or humorous touch** without breaking tone
- End with a **difficulty emoji**:  
  - 🟢 (Beginner)  
  - 🟡 (Intermediate)  
  - 🔴 (Advanced)
- Examples: "Terraform and company are watching you..." 👀

### 2. Answer Options
- **Exactly 4 options**, each starting with an emoji for better visual scanning
- **Only one correct answer**
- **Maximum 80 characters per option** (YouTube limit)
- Write concisely, understandably, and attractively
- Brief and technical style with a touch of humor when appropriate

### 3. Correct Answer + Explanation
- Shown right below the correct option
- **2–3 lines maximum**
- **Start with an emoji** (📘, 🔍, 🩺, 💡, ⚡, 🎯, etc.)
- **Educational and relaxed tone** without losing depth
- **Real technical content** that provides genuine value
- Controlled humor, analogies, or references allowed: "like a crystal ball!" 🔮

## 📁 Multilingual File Structure

- Spanish files go under: `tema/es/` (e.g. `bash/es/cuestionario1.md`)
- English files go under: `tema/en/` (e.g. `bash/en/questions1.md`)
- New sets of questions should create `cuestionario2.md`, `questions2.md`, etc.
- Never combine all questions into a single file per topic—keep them modular for easier versioning and dynamic loading
- ⚠️ **Each quiz file must contain exactly 21 questions**

## 📁 File & Directory Structure

Organize all files per topic and language:

```
.
├── bash/
│   ├── es/
│   │   ├── cuestionario1.md
│   │   └── cuestionario2.md
│   └── en/
│       ├── questions1.md
│       └── questions2.md
├── terraform/
│   ├── es/
│   │   └── cuestionario1.md
│   └── en/
│       └── questions1.md
...
```

- Use `cuestionarioN.md` for Spanish  
- Use `questionsN.md` for English  
- Never combine both languages or all questions into one file  
- Start new versions as `questions2.md`, `cuestionario3.md`, etc.

## 📌 Golden Rules

✅ Less is more: concise, but rich in value  
✅ Uniform visual style and emojis  
✅ Clear difficulty marking  
✅ Multilingual output per topic  
✅ Keep everything in Markdown  
✅ No redundant or duplicate questions  
✅ Include practical CLI commands where helpful  
✅ Maintain modularity: one file = one quiz = 21 questions  
✅ All content should be readable and usable directly in GitHub Pages/static site

## 🌟 Approved Tone Examples

✅ "Perfect for avoiding 'oops in production' 💥" → educational + approachable  
✅ "It's the container's pulse. If it doesn't respond... bye bye, restart! ♻️"  
✅ "Without this, not even the best script runs. 😅"  
✅ "Like a bouncer at a VIP club, but for your infrastructure 🕺"  
✅ "The Swiss Army knife of container orchestration 🔧"

## 📝 Content Guidelines

### Topics to Cover:
- **Containerization** (Docker, Kubernetes)
- **CI/CD** (pipelines, automation)
- **Cloud Services** (AWS, Azure, GCP)
- **IaC** (Terraform, Ansible)
- **Monitoring & Observability**
- **Security** (DevSecOps)
- **Scripting** (Bash, Python)
- **Git & GitHub**
- **Networking**
- **Databases**

### Question Types:
- Definitions
- Best practices
- Troubleshooting
- Tool comparisons
- Security scenarios
- Optimization techniques

### Answer Structure:
- One clear correct answer  
- Three plausible but incorrect distractors  
- Followed by an explanation: why right is right and others are not

## 🎨 Visual Elements

### Emoji Usage:
- **Questions**: ❓, 🧠, 🤔, 🔍  
- **Answers**: 📝, ⚙️, 🔧, 🐳, ☁️, etc.  
- **Explanations**: 📘, 💡, 🩺, 🎯, ⚡  
- **Difficulty**: 🟢 Beginner, 🟡 Intermediate, 🔴 Advanced

### Format Template:

[Emoji] [Question text] [Optional fun comment] [Difficulty Emoji]

[Emoji] Option A (≤ 80 chars)
[Emoji] Option B (≤ 80 chars)
[Emoji] Option C (≤ 80 chars)
[Emoji] Option D (≤ 80 chars)

[Emoji] Explanation (2–3 lines with real technical value and light tone)


## 🎨 Markdown Format Template

```markdown
❓ What does the `-e` flag do in Bash's `echo` command? 🟢

📝 Enables interpretation of backslash escapes  
⚙️ Executes the command in verbose mode  
🧱 Echoes environment variables  
📦 Sets execution mode to interactive

💡 With `-e`, `echo` processes special characters like `\n` or `\t`. Without it, they’re printed literally.
```

Repeat this block **21 veces por archivo**.

## 🚀 Quality Checklist

Before publishing:
- [ ] The file has **exactly 21 questions**
- [ ] The file is written in **valid Markdown**
- [ ] All options ≤ 80 characters
- [ ] Each block has emojis, correct formatting, and explanation
- [ ] File naming and structure follow `tema/es/cuestionarioN.md` or `tema/en/questionsN.md`
- [ ] Distractors reflect real-life misunderstandings
- [ ] Explanation gives real value, possibly with humor
- [ ] Proper difficulty emoji 🟢🟡🔴 is added
- [ ] Markdown is ready to be rendered cleanly in GitHub Pages or similar

---

👉 The goal is to build a multilingual DevOps quiz database that fuels continuous learning in a modular, reusable, and visual way — across YouTube, GitHub, and beyond. ⚡